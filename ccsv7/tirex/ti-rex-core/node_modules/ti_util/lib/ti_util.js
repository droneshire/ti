/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *******************************************************************************/
var fsutil = undefined;

if ((process.platform == 'win32') && 
    (((process.versions['node'] !== undefined) && (process.versions['node'].indexOf('0.10.')=== 0)) ||
     ((process.versions['node-webkit'] !== undefined) && (process.versions['node-webkit'].indexOf('0.8.') === 0)))) {
  fsutil = require('ti_fsutil');
}

// redefine console if not available
if (typeof console != "object") 
{
    window.console = 
	{
        log: function() {}
    };
}

/*
var method, methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'],
  length = methods.length,
  console = (window.console = window.console || {});
while (length--) {
  method = methods[length];
  (!console[method]) && (console[method] = function() {});
}
*/
 /* ===============================================
  * getUserHome
  * =============================================== */
var userHome;
var getUserHome = exports.getUserHome  = function() 
{
	if(!userHome)
	{
		userHome = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];	
	}

  return userHome;
}

 /* ===============================================
  * getShortPathName
  * =============================================== */
var getShortPathName = exports.getShortPathName = function(path) {
  	if (process.platform != 'win32' ||path===undefined || path===null || (fsutil === undefined) || (fsutil == null)) 
	{
		return path;
	}
    return fsutil.getShortPathName(path);
}

 /* ===============================================
  * setAppNameTag
  * configures the name of the application to use
  * when accessing folders.  
  * =============================================== */
var appNameTag;
exports.setAppNameTag = function(name) {
  if (!appNameTag)
  {
      appNameTag = name;
	  if (process.platform == 'win32'){
	     // TODO: verify that the subfolder has been created
	  }
   }
}

 /* ===============================================
  * getConfigFileDir
  * =============================================== */
var configFileDir;
exports.getConfigFileDir  = function() 
{
	if(!configFileDir)
	{
		configFileDir = getShortPathName(getUserHome()	 + "/ti/");
	}

  return configFileDir;
}

 /* ===============================================
  * getSharedTemporaryFileDir
  * =============================================== */
var sharedTemporaryFileDir;
exports.getSharedTemporaryFileDir  = function()
{	
	if(!sharedTemporaryFileDir)
	{
		sharedTemporaryFileDir=getShortPathName(process.env.APPDATA);
		
	}

	return sharedTemporaryFileDir;
}

 /* ===============================================
  * getTemporaryFileDir
  * Note that on WINXP this does not exits
  * =============================================== */
var temporaryFileDir;
exports.getTemporaryFileDir  = function()
{	
	if(!temporaryFileDir)
	{
		temporaryFileDir=getShortPathName(process.env.LOCALAPPDATA);
	}

	return temporaryFileDir;
}

 

 /* ===============================================
  * getArguments
  * =============================================== */
var arguments;
exports.getArguments  = function() 
{
	if(!arguments)
	{
		arguments = process.argv;
	}

  return arguments;
}


 /* ===============================================
  * getEnv
  * =============================================== */
var env;
exports.getEnv  = function() 
{
	if(!env)
	{
		env = process.env;
	}

  return env;
}

 /* ===============================================
  * isNodeApp
  * =============================================== */
var nodeApp;
exports.isNodeApp  = function() 
{
	if(!nodeApp)
	{
		nodeApp = !isNodeWebkitApp();
	}

  return nodeApp;
}

 /* ===============================================
  * isNodeWebkitApp
  * =============================================== */
var nodeWebkitApp;
var isNodeWebkitApp = exports.isNodeWebkitApp  = function() 
{
	if(!nodeWebkitApp)
	{
		if(process.versions['node-webkit'])
		{
			nodeWebkitApp = true;
		}
		else
		{
			nodeWebkitApp = false;		
		}
	}

  return nodeWebkitApp;
}

 /* ===============================================
  * getNodeVersion
  * =============================================== */
var nodeVersion;
exports.getNodeVersion  = function()
{
	if(!nodeVersion)
	{
		nodeVersion = process.versions['node'];
	}
	
	return nodeVersion;
}

 /* ===============================================
  * getNodeWebkitVersion
  * =============================================== */
var nwVersion;
exports.getNodeWebkitVersion = function ()
{
	if(!nwVersion)
	{
		nwVersion = process.versions['node-webkit'];
	}
	
	return nwVersion;
}

 /* ===============================================
  * getAppName
  * =============================================== */
var appName;
exports.getAppName = function()
{	
	if(!appName)
	{
		if(isNodeWebkitApp())
		{
			var gui=global.window.nwDispatcher.requireNwGui();
			appName=gui.App.manifest.name;
		}
	}
	
	return appName;
}
 /* ===============================================
  * getAppVersion
  * =============================================== */
var appVersion;
exports.getAppVersion  = function()
{	
	if(!appVersion)
	{
		if(isNodeWebkitApp())
		{
			var gui=global.window.nwDispatcher.requireNwGui();
			appVersion=gui.App.manifest.version;
		}
	}

	return appVersion;
}



/* ===============================================
  * getUserName
  * =============================================== */
var userName;
exports.getUserName  = function()
{	
	if(!userName)
	{
		userName=process.env.USERNAME || process.env.USER || process.env.LOGNAME;
	}

	return userName;
}

/* ===============================================
  * getComputerName
  * =============================================== */
var computerName;
exports.getComputerName  = function()
{	
	if(!computerName)
	{
		computerName=process.env.COMPUTERNAME;
	}

	return computerName;
}

/* ===============================================
  * getOS
  * =============================================== */
var getOS = exports.getOS = function()
{	
	return process.platform;
}

/* ===============================================
  * isWindows
  * =============================================== */
exports.isWindows  = function()
{	
	return (getOS()=='win32');
}

/* ===============================================
  * isLinux
  * =============================================== */
exports.isLinux  = function()
{	
	return (getOS()=='linux');
}

/* ===============================================
 * isMac
 * =============================================== */
exports.isMac  = function()
{	
	return (getOS()=='darwin');
}


/* ===============================================
 * isString
 * =============================================== */
var isString = exports.isString = function(s) 
{
	if (s===undefined || s===null) 
	{
		return false;
	}
	
	//return (typeof s == 'string' || s instanceof String) //s.constructor===String;
	return (Object.prototype.toString.call(s) === '[object String]');
	
};

/* ===============================================
 * isFunction
 * =============================================== */
var isFunction = exports.isFunction = function(f) 
{
	if (f===undefined || f===null) 
	{
		return false;
	}
	
	//return f.constructor===Function;
	//return typeof f === 'function';
	return (Object.prototype.toString.call(f) === '[object Function]');
};

/* ===============================================
 * isNumber
 * =============================================== */
var isNumber = exports.isNumber = function(n) 
{
	if (n===undefined || n===null)  
	{
		return false;
	}
	
	//return n.constructor===Number;
	return typeof n === 'number';
	return (Object.prototype.toString.call(n) === '[object Number]');
	
};

/* ===============================================
 * isBoolean
 * =============================================== */
var isBoolean = exports.isBoolean = function(b) 
{
	if (b===undefined || b===null)
	{
		return false;
	}
	
	//return b.constructor===Boolean;
	//return typeof b === 'boolean';
	return (Object.prototype.toString.call(b) === '[object Boolean]');
};

/* ===============================================
 * isDefined
 * =============================================== */
var isDefined = exports.isDefined = function(o) 
{
	return o!==undefined;
};

/* ===============================================
 * isEmpty
 * =============================================== */
var isEmpty = exports.isEmpty = function(o) 
{
	if (o===undefined || o===null)
	{
		return true;
	}
	
	if (isArray(o) && o.length===0)
	{
		return true;
	}
	
	if (isString(o) && o.length===0) 
	{
		return true;
	}
	
	if (isRealObject(o) && Object.keys(o).length===0) 
	{
		return true;
	}
	
	return false;
};

/* ===============================================
 * isUndefined
 * =============================================== */
var isUndefined = exports.isUndefined = function(o) 
{
	return o===undefined;
};

/* ===============================================
 * isObject
 * =============================================== */
var isObject = exports.isObject = function(o) 
{
	return o!==undefined;
};


/* ===============================================
 * isDate
 * =============================================== */
var isDate = exports.isDate = function(date) 
{
	if( date===undefined &&   date===null)
	{
		return false;
	}
	
	return Object.prototype.toString.call(date) === '[object Date]';	
}

/* ===============================================
 * isError
 * =============================================== */
var isError = exports.isError = function(error) 
{
	if( error===undefined &&   error===null)
	{
		return false;
	}
	
	return (Object.prototype.toString.call(error) === '[object Error]');	
}

/* ===============================================
 * isRegExp
 * =============================================== */
var isRegExp = exports.isRegExp = function(exp)
{
	if( exp===undefined &&   exp===null)
	{
		return false;
	}

	//return (exp.constructor == RegExp);
	return (Object.prototype.toString.call(exp) === '[object RegExp]');
}

/* ===============================================
 * isArray
 * =============================================== */
var isArray = exports.isArray = function(array)
{
	if( array===undefined &&   array===null)
	{
		return false;
	}
	
	return ( Object.prototype.toString.call( array ) === '[object Array]' );
}

/* ===============================================
 * isRealObject
 * =============================================== */
var isRealObject = exports.isRealObject = function(o) 
{
	if( o!==undefined &&   o!==null &&  !isFunction(o) && 
		   !isNumber(o) && !isString(o) &&  !isBoolean(o) && 
		   !isArray(o)  &&   !isDate(o) &&  !isRegExp(o) && 
		   !isError(o))
	{
		return true;
	}
	else
	{
		return false;
	}
		   
};

/* ===============================================
 * isJSON
 * =============================================== */
var isJSON = exports.isJSON = function(string) 
{
	if (!isString(string))
	{
	  return false;
	}

	try 
	{
		JSON.parse(string);
	} 
	catch (e) 
	{
		return false;
	}
	
	return true;
}

