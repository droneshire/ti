'use strict';
var assert = require("assert");
var tiutil = require("../lib/ti_util.js");
var fsutil = require("ti_fsutil");
var chai = require('chai');
var expect = chai.expect;  // See http://chaijs.com/api/bdd/ for examples of expect syntax 


  
describe('ti_util.require', function()
{
	it('tiutil should be an object', function()
	{
		expect(tiutil).to.not.be.undefined;
		expect(tiutil).to.not.be.empty;	  
		//TODO: remove if once fsutil supports new node 0.12 API definitions
                if (process.versions['node'].indexOf('0.10.')=== 0) {		
			expect(fsutil).to.not.be.undefined;
			expect(fsutil).to.not.be.empty;	  
		}
	})
})

describe('ti_util.app type', function()
{
	it('thsould not be a nw app', function()
	{
	  assert(!tiutil.isNodeWebkitApp());
	  assert(tiutil.isNodeApp());

	})
})


describe('ti_util.Test functions', function()
{
  describe('#isString', function()
  {
    it('should return true for a real String and false for everything else', function()
	{
      assert(tiutil.isString("a string"));
	  assert(tiutil.isString(new String()));
	  assert(!tiutil.isString(undefined));
	  assert(!tiutil.isString(null));
	  assert(!tiutil.isString(new Date()));
	  assert(!tiutil.isString(new Error("error message")));
	  assert(!tiutil.isString(new Object()));
	  assert(!tiutil.isString(new Array()));
	  assert(!tiutil.isString(function(){}));
	  assert(!tiutil.isString(123.5));
	  assert(!tiutil.isString(true));
	  assert(!tiutil.isString(new Boolean()));
	  assert(!tiutil.isString(new RegExp()));
    })
  })
  
  describe('#isFunction', function()
  {
    it('should return true for a function and false for everything else', function()
	{
      assert(!tiutil.isFunction("a string"));
	  assert(!tiutil.isFunction(new String()));
	  assert(!tiutil.isFunction(undefined));
	  assert(!tiutil.isFunction(null));
	  assert(!tiutil.isFunction(new Date()));
	  assert(!tiutil.isFunction(new Error("error message")));
	  assert(!tiutil.isFunction(new Object()));
	  assert(!tiutil.isFunction(new Array()));
	  assert(tiutil.isFunction(function(){}));
	  assert(!tiutil.isFunction(123.5));
	  assert(!tiutil.isFunction(true));
	  assert(!tiutil.isFunction(new Boolean()));
	  assert(!tiutil.isFunction(new RegExp()));
    })
  })
  
  describe('#isNumber', function()
  {
    it('should return true for a number and false for everything else', function()
	{
      assert(!tiutil.isNumber("a string"));
	  assert(!tiutil.isNumber(new String()));
	  assert(!tiutil.isNumber(undefined));
	  assert(!tiutil.isNumber(null));
	  assert(!tiutil.isNumber(new Date()));
	  assert(!tiutil.isNumber(new Error("error message")));
	  assert(!tiutil.isNumber(new Object()));
	  assert(!tiutil.isNumber(new Array()));
	  assert(!tiutil.isNumber(function(){}));
	  assert(tiutil.isNumber(123.5));
	  assert(!tiutil.isNumber(true));
	  assert(!tiutil.isNumber(new Boolean()));
	  assert(!tiutil.isNumber(new RegExp()));
    })
  })
  
  describe('#isBoolean', function()
  {
    it('should return true for a boolean and false for everything else', function()
	{
      assert(!tiutil.isBoolean("a string"));
	  assert(!tiutil.isBoolean(new String()));
	  assert(!tiutil.isBoolean(undefined));
	  assert(!tiutil.isBoolean(null));
	  assert(!tiutil.isBoolean(new Date()));
	  assert(!tiutil.isBoolean(new Error("error message")));
	  assert(!tiutil.isBoolean(new Object()));
	  assert(!tiutil.isBoolean(new Array()));
	  assert(!tiutil.isBoolean(function(){}));
	  assert(!tiutil.isBoolean(123.5));
	  assert(tiutil.isBoolean(true));
	  assert(tiutil.isBoolean(new Boolean(true)));
	  assert(!tiutil.isBoolean(new RegExp()));
    })
  })
  
  
  
   describe('#isUndefined', function()
  {
    it('should return true for an undefined and false for everything else', function()
	{
      assert(!tiutil.isUndefined("a string"));
	  assert(!tiutil.isUndefined(new String()));
	  assert(tiutil.isUndefined(undefined));
	  assert(!tiutil.isUndefined(null));
	  assert(!tiutil.isUndefined(new Date()));
	  assert(!tiutil.isUndefined(new Error("error message")));
	  assert(!tiutil.isUndefined(new Object()));
	  assert(!tiutil.isUndefined(new Array()));
	  assert(!tiutil.isUndefined(function(){}));
	  assert(!tiutil.isUndefined(123.5));
	  assert(!tiutil.isUndefined(true));
	  assert(!tiutil.isUndefined(new Boolean(true)));
	  assert(!tiutil.isUndefined(new RegExp()));
    })
  })
  
  describe('#isDefined', function()
  {
    it('should return true for a defined and false for everything else', function()
	{
      assert(tiutil.isDefined("a string"));
	  assert(tiutil.isDefined(new String()));
	  assert(!tiutil.isDefined(undefined));
	  assert(tiutil.isDefined(null));
	  assert(tiutil.isDefined(new Date()));
	  assert(tiutil.isDefined(new Error("error message")));
	  assert(tiutil.isDefined(new Object()));
	  assert(tiutil.isDefined(new Array()));
	  assert(tiutil.isDefined(function(){}));
	  assert(tiutil.isDefined(123.5));
	  assert(tiutil.isDefined(true));
	  assert(tiutil.isDefined(new Boolean(true)));
	  assert(tiutil.isDefined(new RegExp()));
    })	
   })


   describe('#isObject', function()
  {
    it('should return true for an undefined and false for everything else', function()
	{
      assert(tiutil.isObject("a string"));
	  assert(tiutil.isObject(new String()));
	  assert(!tiutil.isObject(undefined));
	  assert(tiutil.isObject(null));
	  assert(tiutil.isObject(new Date()));
	  assert(tiutil.isObject(new Error("error message")));
	  assert(tiutil.isObject(new Object()));
	  assert(tiutil.isObject(new Array()));
	  assert(tiutil.isObject(function(){}));
	  assert(tiutil.isObject(123.5));
	  assert(tiutil.isObject(true));
	  assert(tiutil.isObject(new Boolean(true)));
	  assert(tiutil.isObject(new RegExp()));
    })
  })
  
  describe('#isDate', function()
  {
    it('should return true for a Date and false for everything else', function()
	{
      assert(!tiutil.isDate("a string"));
	  assert(!tiutil.isDate(new String()));
	  assert(!tiutil.isDate(undefined));
	  assert(!tiutil.isDate(null));
	  assert(tiutil.isDate(new Date()));
	  assert(!tiutil.isDate(new Error("error message")));
	  assert(!tiutil.isDate(new Object()));
	  assert(!tiutil.isDate(new Array()));
	  assert(!tiutil.isDate(function(){}));
	  assert(!tiutil.isDate(123.5));
	  assert(!tiutil.isDate(true));
	  assert(!tiutil.isDate(new Boolean(true)));
	  assert(!tiutil.isDate(new RegExp()));
    })
  })

  describe('#isError', function()
  {
    it('should return true for an Error and false for everything else', function()
	{
      assert(!tiutil.isError("a string"));
	  assert(!tiutil.isError(new String()));
	  assert(!tiutil.isError(undefined));
	  assert(!tiutil.isError(null));
	  assert(!tiutil.isError(new Date()));
	  assert(tiutil.isError(new Error("error message")));
	  assert(!tiutil.isError(new Object()));
	  assert(!tiutil.isError(new Array()));
	  assert(!tiutil.isError(function(){}));
	  assert(!tiutil.isError(123.5));
	  assert(!tiutil.isError(true));
	  assert(!tiutil.isError(new Boolean(true)));
	  assert(!tiutil.isError(new RegExp()));
    })
  })

  describe('#isRegExp', function()
  {
    it('should return true for a RegExp and false for everything else', function()
	{
      assert(!tiutil.isRegExp("a string"));
	  assert(!tiutil.isRegExp(new String()));
	  assert(!tiutil.isRegExp(undefined));
	  assert(!tiutil.isRegExp(null));
	  assert(!tiutil.isRegExp(new Date()));
	  assert(!tiutil.isRegExp(new Error("error message")));
	  assert(!tiutil.isRegExp(new Object()));
	  assert(!tiutil.isRegExp(new Array()));
	  assert(!tiutil.isRegExp(function(){}));
	  assert(!tiutil.isRegExp(123.5));
	  assert(!tiutil.isRegExp(true));
	  assert(!tiutil.isRegExp(new Boolean(true)));
	  assert(tiutil.isRegExp(new RegExp()));
    })
  })

  describe('#isArray', function()
  {
    it('should return true for an Array and false for everything else', function()
	{
      assert(!tiutil.isArray("a string"));
	  assert(!tiutil.isArray(new String()));
	  assert(!tiutil.isArray(undefined));
	  assert(!tiutil.isArray(null));
	  assert(!tiutil.isArray(new Date()));
	  assert(!tiutil.isArray(new Error("error message")));
	  assert(!tiutil.isArray(new Object()));
	  assert(tiutil.isArray(new Array()));
	  assert(!tiutil.isArray(function(){}));
	  assert(!tiutil.isArray(123.5));
	  assert(!tiutil.isArray(true));
	  assert(!tiutil.isArray(new Boolean(true)));
	  assert(!tiutil.isArray(new RegExp()));
    })
  })

  describe('#isRealObject', function()
  {
    it('should return true for an Array and false for everything else', function()
	{
      assert(!tiutil.isRealObject("a string"));
	  assert(!tiutil.isRealObject(new String()));
	  assert(!tiutil.isRealObject(undefined));
	  assert(!tiutil.isRealObject(null));
	  assert(!tiutil.isRealObject(new Date()));
	  assert(!tiutil.isRealObject(new Error("error message")));
	  assert(tiutil.isRealObject(new Object()));
	  assert(!tiutil.isRealObject(new Array()));
	  assert(!tiutil.isRealObject(function(){}));
	  assert(!tiutil.isRealObject(123.5));
	  assert(!tiutil.isRealObject(true));
	  assert(!tiutil.isRealObject(new Boolean(true)));
	  assert(!tiutil.isRealObject(new RegExp()));
    })
  })

  describe('#isJSON', function()
  {
    it('should return true for a JSON String and false for everything else', function()
	{
      assert(!tiutil.isJSON("a string"));
	  assert(!tiutil.isJSON(new String()));
	  assert(tiutil.isJSON('{"a":5,"b":true}'));
	  assert(!tiutil.isJSON(undefined));
	  assert(!tiutil.isJSON(null));
	  assert(!tiutil.isJSON(new Date()));
	  assert(!tiutil.isJSON(new Error("error message")));
	  assert(!tiutil.isJSON(new Object()));
	  assert(!tiutil.isJSON(new Array()));
	  assert(!tiutil.isJSON(function(){}));
	  assert(!tiutil.isJSON(123.5));
	  assert(!tiutil.isJSON(true));
	  assert(!tiutil.isJSON(new Boolean(true)));
	  assert(!tiutil.isJSON(new RegExp()));
    })
  })
}) 

  describe('ti_util.getShortPathName', function()
  {
      it('should return the 8.3 name for the global directory', function(done)
	  {
		var globalDirLongName = 'C:\\ProgramData\\Texas Instruments\\CCS';
		//TODO: remove if once fsutil supports new node 0.12 API definitions
                if ((process.platform == 'win32') && (process.versions['node'].indexOf('0.10.')>= 0)) {		
		    var shortDirName = fsutil.getShortPathName(globalDirLongName);
	            assert.notEqual(shortDirName,undefined);
		    assert.notEqual(shortDirName.length,0);
		    assert.equal(shortDirName,fsutil.getGlobalFileDir());
		}
		done();
	  });
  });  
//----