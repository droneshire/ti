/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
'use strict';
var chai = require('chai');
var expect = chai.expect;  // See http://chaijs.com/api/bdd/ for examples of expect syntax 
var fsutil;

function testsAreEnabled(){
   var result = (process.versions['node'].indexOf('0.10.')=== 0);
   return result;
}

if (testsAreEnabled()){
	if (process.platform === 'darwin') {
	  fsutil = require('../bin/mac_test/ti_fsutil');
	} else {
	  if (process.platform === 'win32') {
		fsutil = require('../bin/win32_test/ti_fsutil');
	  } else {
		fsutil = require('../bin/linux32_test/ti_fsutil');
	  }
	}
} 

/*
 *  ======== dbgPrint ========
 */
var isEnableDebugPrintf = false;
function dbgPrint(str)
{
	if (isEnableDebugPrintf) {
		console.log(str);
	}
}




if (testsAreEnabled()){

describe('ti_fsutil.require', function()
{
	it('ti_fsutil should be an object', function()
	{
		expect(fsutil).to.not.be.undefined;
		expect(fsutil).not.to.be.null;
	});
});

describe('ti_fsutil.load fsutil_dll', function()
{

	it('should return 0 when loading the DLL', function()
	{
		fsutil.setAppNameTag('test');
		fsutil.setPathToDll('lib\\win32\\fsutil.dll');
		var retCode = fsutil.getErrorFromLoadLibrary();
		if (process.platform !== 'win32') {
			expect(retCode).to.equal(-1);
		} else {
			expect(retCode).to.equal(0);
		}
	});
});

if (process.platform === 'win32') {
describe('ti_fsutil.ti-fsutil directories', function()
{
  
  describe('getGlobalDir', function()
  {
    it('should return the global directory', function(done)
	{
		var globalDir = fsutil.getGlobalFileDir();
		expect(globalDir).to.not.be.undefined;
		expect(globalDir).to.not.be.empty;
		expect(globalDir).to.contain('TEXAS');
		done();
    });
  });
  describe('getSharedTemporaryFileDir', function()
  {
    it('should return the shared temporary directory', function(done)
	{
		var sharedTempDir = fsutil.getSharedTemporaryFileDir();
		expect(sharedTempDir).to.not.be.undefined;
		expect(sharedTempDir).to.not.be.empty;
		expect(sharedTempDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });
  
  describe('getTemporaryFileDir', function()
  {
    it('should return the temporary directory', function(done)
	{
		var tempDir = fsutil.getTemporaryFileDir();
		expect(tempDir).to.not.be.undefined;
		expect(tempDir).to.not.be.empty;
		expect(tempDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });
  
  describe('getConfigFileDir', function()
  {
    it('should return the config file directory', function(done)
	{
		var configFileDir = fsutil.getConfigFileDir();
		expect(configFileDir).to.not.be.undefined;
		expect(configFileDir).to.not.be.empty;
		expect(configFileDir).to.contain('ti');
		done();
    });
  });
    describe('getDumpFileDir', function()
  {
    it('should return the dump file directory', function(done)
	{
		var dumpFileDir = fsutil.getDumpFileDir();
		expect(dumpFileDir).to.not.be.undefined;
		expect(dumpFileDir).to.not.be.empty;
		expect(dumpFileDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });

  
  describe('getShortPathName', function()
  {
      it('should return the 8.3 name for the global directory', function(done)
	  {
		var globalDirLongName = 'C:\\ProgramData\\Texas Instruments\\CCS';
		var shortDirName = fsutil.getShortPathName(globalDirLongName);
		expect(shortDirName).to.not.be.undefined;
		expect(shortDirName).to.not.be.empty;
		dbgPrint("\nshortDirName = "+shortDirName+", from "+globalDirLongName);
		expect(shortDirName).to.equal(fsutil.getGlobalFileDir());
		done();
	  });
  });  


}); 

} 

} else {
	console.log('ti_fsutil tests have been disabled:');
	console.log('node version = '+process.versions['node']+' [tests enabled only for v0.10.x]');
	console.log('TODO: update ti_fsutil to support node.js v12 C++ APIs');
}
