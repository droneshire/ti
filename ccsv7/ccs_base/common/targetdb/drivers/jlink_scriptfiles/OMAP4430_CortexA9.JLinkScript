/*********************************************************************
*              SEGGER MICROCONTROLLER GmbH & Co. K.G.                *
*        Solutions for real time microcontroller applications        *
**********************************************************************
*                                                                    *
*        (c) 2010 SEGGER Microcontroller GmbH & Co. KG               *
*                                                                    *
* Internet: www.segger.com Support: support@segger.com               *
*                                                                    *
**********************************************************************
----------------------------------------------------------------------
Purpose : J-Link script file for TI OMAP4430 (Cortex-A9) device.
          By default, only the TI ICEPick is in the JTAG chain
          which means that we have to add the Cortex-A9 by configuring the ICEPick.
---------------------------END-OF-HEADER------------------------------
*/

/*********************************************************************
*
*       _StoreSelDP
*/
void _StoreSelDP(void) {
  JTAG_StoreIR(0xA);  // DPACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreSelAP
*/
void _StoreSelAP(void) {
  JTAG_StoreIR(0xB);  // APACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreTriggerReadAPDPReg
*
*  Function description
*    Triggers a read of an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreTriggerReadAPDPReg(unsigned int RegIndex) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;
  v |= 1;                // 1 indicates read access
  v |= (RegIndex << 1);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       _StoreWriteAPDPReg
*
*  Function description
*    Writes an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreWriteAPDPReg(unsigned int RegIndex, __int64 Data) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;   // 0 indicates write access
  v |= (RegIndex << 1);
  v |= (Data << 3);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       _SetBP
*/
void _SetBP(int DbgRegBaseAddr, int BreakAddr) {
  //
  // Step 1. Disable the breakpoint being set.
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x50 << 2));
  _StoreWriteAPDPReg(3, 0x00000000);
  //
  // Step 2. Write address to the BVR, leaving the bottom 2 bits zero.
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x40 << 2));
  _StoreWriteAPDPReg(3, BreakAddr);
  //
  // Step 3. Write the mask and control register to enable the breakpoint.
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x50 << 2));
  _StoreWriteAPDPReg(3, 7 | (0xF << 5) | (0 << 20));
  JTAG_WriteClocks(1);   // Make sure that JTAG buffers are empty and breakpoint is set
}

/*********************************************************************
*
*       ResetTarget
*/
void ResetTarget(void) {
  int DbgRegBaseAddr;
  int Speed;
  int BitPos;
  int Ctrl;
  __int64 v;
  __int64 Ctrl;

  //
  // No need for JTAG-chain setup at this point because we are always talking to "our" device
  // when this function is executed
  //
  
  Report("J-Link script: Reset");
  Speed          = JTAG_Speed;
  JTAG_Speed     = 500;
  DbgRegBaseAddr = 0xD4140000;
  //
  // Select & setup APB-AP
  //
  _StoreSelDP();
  _StoreWriteAPDPReg(2, (1 << 24) | (0 << 4));  // Select AP[1], bank 0
  _StoreSelAP();
  Ctrl =  0
       | (2 << 0)    // AP-access size. Fixed to 2: 32-bit
       | (1 << 4)    // Auto increment TAR after read/write access. Increment is NOT performed on access to banked data registers 0-3.
       | (1 << 31)   // Enable software access to the Debug APB bus.
       ;
  _StoreWriteAPDPReg(0, Ctrl);
  JTAG_WriteClocks(1);
  //
  // Set breakpoint to halt target at start of the public ROM code.
  // Since there are many ways the OMAP4430 can boot, it is not that simple to halt it after ROM execution but before application execution
  //
  _SetBP(DbgRegBaseAddr, 0x00028000);
  //
  // Make sure that ARMInst bit is not set when performing the reset
  // because if the CPU does not halt after reset and this bit is set, the behavior is unpredictable 
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + 0x88);
  _StoreTriggerReadAPDPReg(3);
  _StoreSelDP();
  BitPos = _StoreTriggerReadAPDPReg(3);
  v = JTAG_GetU32(BitPos + 3);
  if (v & (1 << 13)) {
    v &= 0xFFFFDFFF;  // Clear ITRen bit
    _StoreSelAP();
    _StoreWriteAPDPReg(1, DbgRegBaseAddr + 0x88);
    _StoreWriteAPDPReg(3, v);
    JTAG_WriteClocks(1);
  }
  //
  // Setup JTAG config to "talk" to the ICEPick, so we can use the JTAG API functions
  //
  JTAG_DRPre  = 1;
  JTAG_DRPost = 0;
  JTAG_IRPre  = 4;
  JTAG_IRPost = 0;
  JTAG_IRLen  = 6;
  //
  // Perform reset via ICEPick system control register, by setting the SysReset bit
  //
  JTAG_StoreIR(2);                        // Cmd: ROUTER
  v = 0x01000000;                         // Read SYS_CNTL
  JTAG_StoreDR(v, 32);                    // Send read register command
  BitPos = JTAG_StoreDR(v, 32);           // Shift out register content
  v = JTAG_GetU32(BitPos);
  v &= 0x00FFFFFF;
  v |= 0x81000001;                        // Write SYS_CNTL and set SysReset bit
  JTAG_StoreDR(v, 32);
  JTAG_WriteClocks(10);                   // The reset needs some clocks to get active
  //
  // Setup JTAG config to "talk" to the CPU core again
  //
  JTAG_DRPre  = 0;
  JTAG_DRPost = 1;
  JTAG_IRPre  = 0;
  JTAG_IRPost = 6;
  JTAG_IRLen  = 4;
  //
  // Check if CPU is halted. If not, halt it.
  // Select & setup APB-AP
  //
  _StoreSelDP();
  _StoreWriteAPDPReg(2, (1 << 24) | (0 << 4));  // Select AP[1], bank 0
  _StoreSelAP();
  Ctrl =  0
       | (2 << 0)    // AP-access size. Fixed to 2: 32-bit
       | (1 << 4)    // Auto increment TAR after read/write access. Increment is NOT performed on access to banked data registers 0-3.
       | (1 << 31)   // Enable software access to the Debug APB bus.
       ;
  _StoreWriteAPDPReg(0, Ctrl);
  //
  // Read DSCR to check if CPU is halted
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x22 << 2));
  _StoreTriggerReadAPDPReg(3);
  _StoreSelDP();
  BitPos = _StoreTriggerReadAPDPReg(3);
  v = JTAG_GetU32(BitPos + 3);
  _StoreSelAP();
  if ((v & 1) == 0) {
    //
    // If CPU did not halt after reset, halt it
    //
    Report("J-Link script: Core did not halt after reset. Halting core...");
    v |= (1 << 14);
    _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x22 << 2));   // Enable debug halt mode by writing the DSCR
    _StoreWriteAPDPReg(3, v);
    _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x24 << 2));   // Write DRCR to halt CPU
    _StoreWriteAPDPReg(3, 1);
    JTAG_WriteClocks(1);
  }
  //
  // Remove breakpoint
  //
  _StoreWriteAPDPReg(1, DbgRegBaseAddr + (0x50 << 2));
  _StoreWriteAPDPReg(3, 0);
  _StoreSelDP();
  JTAG_WriteClocks(1);
  JTAG_Speed = Speed;
}

/*********************************************************************
*
*       _InitIcePick
*
*  Function description
*    Configures the ICEPick so that the CPU core also becomes
*    visible in the JTAG chain.
*/
void _InitIcePick(void) {
  int BitPos;
  int BitPos2;
  int v;
  int IcePickCode;
  int DPIdCode;
  int i;
  Report("J-Link script: Init ICEPick");
  JTAG_Reset();                           // Perform TAP reset and J-Link JTAG auto-detection
  if (JTAG_TotalIRLen != 6) {
    MessageBox("Can not find Panda Board eval board (IRLen mismatch)");
  }
  JTAG_DRPre  = 0;
  JTAG_DRPost = 0;
  JTAG_IRPre  = 0;
  JTAG_IRPost = 0;
  JTAG_IRLen  = 6;
  //
  // Check IDCODE and ICEPICKCODE of ICEPick
  //
  JTAG_StoreIR(4);   // IDCODE instruction for ICEPick device
  BitPos = JTAG_StoreDR(0x00000000, 32);
  JTAG_StoreIR(5);
  BitPos2 = JTAG_StoreDR(0x00000000, 32);
  v = JTAG_GetU32(BitPos);
  IcePickCode = JTAG_GetU32(BitPos2);
  if ((v & 0xFFF) != 0x02F) {                                                       // highest nibble holds version information, so it can not be used for verification.
    MessageBox1("Can not find ICE-Pick (IDCODE mismatch). Expected 0xXXXXX02F, found: ", v);
    return 1;
  }
  if ((IcePickCode & 0x0000FFF0) != 0x000047D0) {
    MessageBox("Connected module is not an ICEPick Module (ICEPICKCODE mismatch)");
    return 1;
  }
  //
  // Put CPU core into JTAG chain
  //
  JTAG_StoreIR(7);         // CONNECT
  JTAG_StoreDR(0x89, 8);   // The ICEPick documentation (SPRUE64, 2.6 CONNECT instruction: Accessing the debug connect register). Bit 7 set means: Write debug connect register. We write 0x9 to the debug connect register which is the debug connect key.
  JTAG_StoreIR(2);         // ROUTER (Accessing the mapped registers)
  v = 0
    | (1 << 31)            // Write mapped register
    | (0x29 << 24)         // SDTAP9 register
    | (1 << 13)            // Debug connect
    | (1 << 8)             // TAP select
    | (1 << 3)             // Force active
    ;
  JTAG_StoreDR(v, 32);
  JTAG_StoreIR(0x3F);             // Bypass
  JTAG_WriteClocks(10);
  //
  // Configure JTAG chain, so J-Link knows to which devices it has to "talk" to.
  // CPU core is in scan chain now, so we have to re-configure the JTAG chain settings
  //
  JTAG_DRPre  = 0;
  JTAG_DRPost = 1;
  JTAG_IRPre  = 0;
  JTAG_IRPost = 6;
  JTAG_IRLen  = 4;
  CPU=CORTEX_A9;                             // Pre-select that we have a Cortex-A9 connected
  JTAG_AllowTAPReset=0;                      // J-Link is not allowed to use a TAP reset for JTAG-chain auto-detection since this would kick out the Cortex-A9 out of the JTAG chain
  CORESIGHT_CoreBaseAddr = 0xD4140000;       // Set base address of the debug registers of the first Cortex-A9 core. (The OMAP4430 incorporates two Cortex-A9 cores)
  //
  // Manually configure which APs are present on the CoreSight device
  //
  CORESIGHT_AddAP(0, CORESIGHT_AHB_AP);
  CORESIGHT_AddAP(1, CORESIGHT_APB_AP);
  CORESIGHT_AddAP(2, CORESIGHT_JTAG_AP);
  //
  // Check JTAG-DP IDCODE
  //
  JTAG_StoreIR(0xE);  // Read JTAG-DP IDCODE register
  BitPos = JTAG_StoreDR(0x00000000, 32);  // Get ID
  v = JTAG_GetU32(BitPos);
  if ((v & 0xFFF) != 0x00000477) {
    MessageBox("Can not find JTAG-DP (IDCODE mismatch)");
  }
  //
  // Set JTAG IDs for all devices in the JTAG chain
  //
  JTAG_SetDeviceId(0, 0x3BA00477);        // JTAG-DP
  JTAG_SetDeviceId(1, 0x3B95C02F);        // ICEPick
  JTAG_WriteClocks(1);                    // Make sure all JTAG buffers are cleared
}

/*********************************************************************
*
*       InitEMU
*/
void InitEMU(void) {
  EMU_ETB_IsPresent = 0;
}

/*********************************************************************
*
*       InitTarget
*/
void InitTarget(void) {
  int Speed;

  Report("Panda Board, TI OMAP4430 (Cortex-A9 core) J-Link script");
  Speed       = JTAG_Speed;
  JTAG_Speed  = 500;
  EMU_JTAG_DisableHWTransmissions = 1;   // We are not allowed to use the HW-units of the J-Link to transmit JTAG data
  //
  // By performing a TRST reset, we make sure that only the ICEPick module is in the scan chain
  //
  JTAG_ResetPin = 0;
  JTAG_TRSTPin = 0;
  SYS_Sleep(50);
  JTAG_TRSTPin = 1;
  JTAG_ResetPin = 1;
  JTAG_Write(0x1F, 0, 6);
  _InitIcePick();
  JTAG_Speed = Speed;
}