/*--------------------------------------------------------------*/
/* DSK6416.gel                                                  */
/* Version 3.01                                                 */
/*                                                              */
/* This GEL file is designed to be used in conjunction with     */
/* CCS 3.X and the 1GHz TMS320C6416T based DSK.                 */
/*                                                              */
/*--------------------------------------------------------------*/

/*--------------------------------------------------------------*/
/* StartUp()                                                    */
/* This function is called each time CCS is started.            */
/* Customize this function to perform desired initialization.   */
/*--------------------------------------------------------------*/
StartUp()
{
    setup_memory_map();

    /*------------------------------------------------------*/
    /* Uncomment the OnTargetConnect() call for CCS 2.X     */
    /* support.                                             */
    /*                                                      */
    /*                                                      */
    /*------------------------------------------------------*/
    //OnTargetConnect();
}

/*--------------------------------------------------------------*/
/* OnTargetConnect()                                            */
/* This function is called by CCS when you do Debug->Connect on */
/* CCS 3.X.  When using CCS 2.X, the OnTargetConnect() call     */
/* should be uncommented from the StartUp() function.           */
/*--------------------------------------------------------------*/
OnTargetConnect()
{
    /*------------------------------------------------------*/
    /* GEL_Reset() is used to deal with the worst case      */
    /* senario of unknown target state.  If for some reason */
    /* a reset is not desired upon target connection,       */
    /* GEL_Reset() may be removed and replaced with         */
    /* something "less brutal" like a cache initialization  */
    /* function.                                            */
    /*------------------------------------------------------*/
    //GEL_Reset();

    init_emif();

    GEL_TextOut("GEL StartUp Complete.\n");
}

/*--------------------------------------------------------------*/
/* OnReset()                                                    */
/* This function is called by CCS when you do Debug->Resest.    */
/* The goal is to put the C6x into a known good state with      */
/* respect to cache, edma and interrupts.                       */
/*--------------------------------------------------------------*/
OnReset( int nErrorCode )
{
    init_emif();
}

/*--------------------------------------------------------------*/
/* OnPreFileLoaded()                                            */
/* This function is called automatically when the 'Load Program'*/
/* Menu item is selected.                                       */
/*--------------------------------------------------------------*/
OnPreFileLoaded()
{
    /*------------------------------------------------------*/
    /* GEL_Reset() is used to deal with the worst case      */
    /* senario of unknown target state.  If for some reason */
    /* a reset is not desired upon target connection,       */
    /* GEL_Reset() may be removed and replaced with         */
    /* something "less brutal" like a cache initialization  */
    /* function.                                            */
    /*------------------------------------------------------*/
    GEL_Reset();

    flush_cache();
    IER = 0;
    IFR = 0;
    init_emif();
}

/*--------------------------------------------------------------*/
/* OnRestart()                                                  */
/* This function is called by CCS when you do Debug->Restart.   */
/* The goal is to put the C6x into a known good state with      */
/* respect to cache, edma and interrupts.                       */
/* Failure to do this can cause problems when you restart and   */
/* run your application code multiple times.  This is different */
/* then OnPreFileLoaded() which will do a GEL_Reset() to get the*/
/* C6x into a known good state.                                 */
/*--------------------------------------------------------------*/
OnRestart( int nErrorCode )
{
    /*------------------------------------------------------*/
    /* Turn off L2 for all EMIFA CE spaces.  App should     */
    /* manage these for coherancy in the application.       */
    /*------------------------------------------------------*/
    //GEL_TextOut("Turn off cache segment\n");
    *(int*)0x01848200 = 0;          // MAR0
    *(int*)0x01848204 = 0;          // MAR1
    *(int*)0x01848208 = 0;          // MAR2
    *(int*)0x0184820c = 0;          // MAR3

    /*------------------------------------------------------*/
    /* Disable EDMA events and interrupts and clear any     */
    /* pending events.                                      */
    /*------------------------------------------------------*/
    //GEL_TextOut("Disable EDMA event\n");
    *(int*)0x01A0FFA8 = 0;          // CIERH
    *(int*)0x01A0FFB4 = 0;          // EERH
    *(int*)0x01A0FFB8 = 0XFFFFFFFF; // ECRH

    *(int*)0x01A0FFE8 = 0;          // CIERL
    *(int*)0x01A0FFF4 = 0;          // EERL
    *(int*)0x01A0FFF8 = 0xFFFFFFFF; // ECRL

    /* Disable other interrupts */
    IER = 0;
    IFR = 0;
}

/*--------------------------------------------------------------*/
/* setup_memory_map()                                           */
/* Memory map setup                                             */
/*--------------------------------------------------------------*/
setup_memory_map()
{
    GEL_MapOn();
    GEL_MapReset();

    /* On-chip memory map */
    GEL_MapAdd( 0x00000000, 0, 0x00100000, 1, 1 );  // Internal Memory
    GEL_MapAdd( 0x01800000, 0, 0x00000058, 1, 1 );  // EMIFA CTL REGS
    GEL_MapAdd( 0x01840000, 0, 0x00008300, 1, 1 );  // L2 REGS
    GEL_MapAdd( 0x01880000, 0, 0x0000000C, 1, 1 );  // HPI REGS
    GEL_MapAdd( 0x018A0000, 0, 0x00000004, 1, 1 );  // HPI REGS cont.
    GEL_MapAdd( 0x018C0000, 0, 0x00000040, 1, 1 );  // MCBSP0 CTL REGS
    GEL_MapAdd( 0x01900000, 0, 0x00000040, 1, 1 );  // MCBSP1 CTL REGS
    GEL_MapAdd( 0x01940000, 0, 0x0000000C, 1, 1 );  // TIMER0 CTL REGS
    GEL_MapAdd( 0x01980000, 0, 0x0000000C, 1, 1 );  // TIMER1 CTL REGS
    GEL_MapAdd( 0x019C0000, 0, 0x0000000C, 1, 1 );  // Interrupt Selector
    GEL_MapAdd( 0x01A00000, 0, 0x00000800, 1, 1 );  // EDMA PARAM
    GEL_MapAdd( 0x01A0FF9C, 0, 0x00000064, 1, 1 );  // EDMA REGS
    GEL_MapAdd( 0x01A40000, 0, 0x00000040, 1, 1 );  // MCBSP2 CTL REGS
    GEL_MapAdd( 0x01A80000, 0, 0x00000058, 1, 1 );  // EMIFB CTL REGS
    GEL_MapAdd( 0x01AC0000, 0, 0x0000000C, 1, 1 );  // TIMER2 CTL REGS
    GEL_MapAdd( 0x01B00000, 0, 0x00000204, 1, 1 );  // GPIO REGS
    GEL_MapAdd( 0x01B40000, 0, 0x00000020, 1, 1 );  // (C6416T only) UTOPIA
    GEL_MapAdd( 0x01B80000, 0, 0x00000054, 1, 1 );  // (C6416T only) TCP/VCP
    GEL_MapAdd( 0x01C00000, 0, 0x00000028, 1, 1 );  // (C6416T only) PCI CNTL
    GEL_MapAdd( 0x01C1FFF0, 0, 0x00000010, 1, 1 );  // (C6416T only) PCI CNTL cont.
    GEL_MapAdd( 0x01C20000, 0, 0x0000000C, 1, 1 );  // (C6416T only) PCI EEPROM
    GEL_MapAdd( 0x02000000, 0, 0x00000034, 1, 1 );  // QDMA REGS
    GEL_MapAdd( 0x30000000, 0, 0x04000000, 1, 1 );  // MCBSP0 Data, EDMA map
    GEL_MapAdd( 0x34000000, 0, 0x04000000, 1, 1 );  // MCBSP1 Data, EDMA map
    GEL_MapAdd( 0x38000000, 0, 0x04000000, 1, 1 );  // MCBSP2 Data, EDMA map
    GEL_MapAdd( 0x50000000, 0, 0x0000008C, 1, 1 );  // (C6416T only) TCP/VCP

    /* Off-chip memory map */
    GEL_MapAdd( 0x60000000, 0, 0x00000008, 1, 1 );  // CPLD  EMIF-B, CE0
    GEL_MapAdd( 0x64000000, 0, 0x00040000, 1, 1 );  // FLASH EMIF-B, CE1
    GEL_MapAdd( 0x80000000, 0, 0x01000000, 1, 1 );  // 16MB SDRAM EMIF-A,CE0
    GEL_MapAdd( 0xA0000000, 0, 0x10000000, 1, 1 );  // EMIF-A, CE2 EXPANSION
    GEL_MapAdd( 0xB0000000, 0, 0x10000000, 1, 1 );  // EMIF-A, CE3 EXPANSION
}

/*--------------------------------------------------------------*/
/* clear_memory_map()                                           */
/* Memory map disable                                           */
/*--------------------------------------------------------------*/
clear_memory_map()
{
    GEL_MapOff();
}

/*--------------------------------------------------------------*/
/* CPLD DEFINITIONS                                             */
/*--------------------------------------------------------------*/
#define CPLD_STAT         0x60000000
#define CPLD_DC           0x60000001
#define CPLD_REV          0x60000004
#define CPLD_MISC         0x60000006

#define Get_Board_Rev     ((*(char *)CPLD_REV) & 0x07)
#define Get_Cpld_Rev      ((*(char *)CPLD_REV>>4) & 0x0F)
#define Get_Switches      ((*(char *)CPLD_STAT>>4) & 0x0F)
#define Get_PLL_Select    ((*(char *)CPLD_MISC>>4) & 0x01)


/*--------------------------------------------------------------*/
/* init_emif()                                                  */
/* Emif initialization                                          */
/*--------------------------------------------------------------*/
init_emif()
{
    #define EMIFA_GCTL       0x01800000
    #define EMIFA_CE1        0x01800004
    #define EMIFA_CE0        0x01800008
    #define EMIFA_CE2        0x01800010
    #define EMIFA_CE3        0x01800014
    #define EMIFA_SDRAMCTL   0x01800018
    #define EMIFA_SDRAMTIM   0x0180001c
    #define EMIFA_SDRAMEXT   0x01800020
    #define EMIFA_CE1SECCTL  0x01800044
    #define EMIFA_CE0SECCTL  0x01800048
    #define EMIFA_CE2SECCTL  0x01800050
    #define EMIFA_CE3SECCTL  0x01800054

    #define EMIFB_GCTL       0x01A80000
    #define EMIFB_CE1        0x01A80004
    #define EMIFB_CE0        0x01A80008
    #define EMIFB_CE2        0x01A80010
    #define EMIFB_CE3        0x01A80014
    #define EMIFB_SDRAMCTL   0x01A80018
    #define EMIFB_SDRAMTIM   0x01A8001c
    #define EMIFB_SDRAMEXT   0x01A80020
    #define EMIFB_CE1SECCTL  0x01A80044
    #define EMIFB_CE0SECCTL  0x01A80048
    #define EMIFB_CE2SECCTL  0x01A80050
    #define EMIFB_CE3SECCTL  0x01A80054

    /*------------------------------------------------------------------------*/
    /* This section sets the EMIF up.  Different settings are required for    */
    /* version 1 of the DSK (100 MHz EMIF) and versions 2 or 3 (120 MHz EMIF).*/
    /* The code sets EMIFB up first so it can read the board version from     */
    /* the CPLD, then completes the EMIF setup based on what it reads from    */
    /* it.  The 120 MHz configuration is used for the initial EMIFB setup     */
    /* because if the EMIF is really running at 100 MHz the timings will      */
    /* just get slower and the EMIFB accesses will still work.                */
    /*------------------------------------------------------------------------*/

    /* Setup EMIFB Version 2 (120 MHz EMIF) */
    *(int*)EMIFB_GCTL       = 0x00002060;
    *(int*)EMIFB_CE0        = 0x02a08a00;       // CE0 CPLD 8-bit
    *(int*)EMIFB_CE1        = 0x02a08a00;       // CE1 Flash 8-bit

    if (     ( Get_Board_Rev == 5 )
        || ( ( Get_Board_Rev == 4 )
          && ( Get_PLL_Select == 1 ) ) )
    {
        /* EMIFA Version 2 (120MHz EMIF) */
        *(int*)EMIFA_GCTL       = 0x00012070;
        *(int*)EMIFA_CE0        = 0xffffffd3;   // CE0 SDRAM
        *(int*)EMIFA_CE2        = 0x23228c22;   // CE2 Daughtercard 32-bit async
        *(int*)EMIFA_CE3        = 0x23228c22;   // CE3 Daughtercard 32-bit async
        *(int*)EMIFA_SDRAMCTL   = 0x47115000;   // SDRAM control
        *(int*)EMIFA_SDRAMTIM   = 0x00000750;   // SDRAM timing refresh
        *(int*)EMIFA_SDRAMEXT   = 0x001faf4d;   // SDRAM extended control
    }
    else
    {
        /* EMIFB Version 1 (100 MHz EMIF) */
        *(int*)EMIFB_GCTL       = 0x00002060;
        *(int*)EMIFB_CE0        = 0x02208800;   // CE0 CPLD 8-bit
        *(int*)EMIFB_CE1        = 0x02208800;   // CE1 Flash 8-bit

        /* EMIFA Version 1 (100 MHz EMIF) */
        *(int*)EMIFA_GCTL       = 0x00012070;
        *(int*)EMIFA_CE0        = 0xffffffd3;   // CE0 SDRAM
        *(int*)EMIFA_CE2        = 0x22a28a22;   // CE2 Daughtercard 32-bit async
        *(int*)EMIFA_CE3        = 0x22a28a22;   // CE3 Daughtercard 32-bit async
        *(int*)EMIFA_SDRAMCTL   = 0x47115000;   // SDRAM control
        *(int*)EMIFA_SDRAMTIM   = 0x00000618;   // SDRAM timing refresh
        *(int*)EMIFA_SDRAMEXT   = 0x000a8529;   // SDRAM extended control
    }
}

/*--------------------------------------------------------------*/
/* flush_cache()                                                */
/* Flush L1 & L2 cache                                          */
/*--------------------------------------------------------------*/
flush_cache()
{
    /* Invalidate L1I and L1D */
    *(int*)0x01840000 = (*(int*)0x01840000 | 0x00000300);

    /* Clean L2 */
    *(int*)0x01845004 = 0x1;
}

/*--------------------------------------------------------------*/
/* init_cpld()                                                  */
/* CPLD Initialization                                          */
/*--------------------------------------------------------------*/
init_cpld()
{
    *(char*)CPLD_STAT = 0;
    *(char*)CPLD_DC   = 0;
    *(char*)CPLD_MISC = 0;
}

/*--------------------------------------------------------------*/
/* DSK6416 MENU                                                 */
/*--------------------------------------------------------------*/
menuitem "DSK6416 Functions";

hotmenu Reset()
{
    GEL_Reset( );
}

hotmenu InitEmif()
{
    init_emif();
}

hotmenu InitCpld()
{
    init_cpld();
}

/*--------------------------------------------------------------*/
/* RESET MENU                                                   */
/*--------------------------------------------------------------*/
menuitem "Resets";

hotmenu ClearBreakPts_Reset_EMIFset()
{
    GEL_BreakPtReset();
    GEL_Reset();
    init_emif();
}

hotmenu FlushCache()
{
    flush_cache();
}

/*--------------------------------------------------------------*/
/* MEMORY MAP MENU                                              */
/*--------------------------------------------------------------*/
menuitem "Memory Map";

hotmenu SetMemoryMap()
{
    setup_memory_map();
}

hotmenu ClearMemoryMap()
{
    clear_memory_map();
}

/*--------------------------------------------------------------*/
/* LED_cycle()                                                  */
/*--------------------------------------------------------------*/
LED_cycle()
{
    #define LED0_on     *(char*)CPLD_STAT = 0x01
    #define LED1_on     *(char*)CPLD_STAT = 0x02
    #define LED2_on     *(char*)CPLD_STAT = 0x04
    #define LED3_on     *(char*)CPLD_STAT = 0x08
    #define LEDs_off    *(char*)CPLD_STAT = 0x00

    LED3_on;
    LED2_on;
    LED1_on;
    LED2_on;
    LED3_on;
    LEDs_off;
}

/*--------------------------------------------------------------*/
/* Check DSK MENU                                               */
/*--------------------------------------------------------------*/
menuitem "Check DSK";
hotmenu QuickTest()
{
    LED_cycle();
    LED_cycle();
    LED_cycle();
    GEL_TextOut(" Switches: %d  Board Revision: %d CPLD Revision: %d\n\n",
                "DSKOutput", 1, 1, 1, Get_Switches, Get_Board_Rev, Get_Cpld_Rev);
}
